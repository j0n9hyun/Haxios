#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('backend:server');
const http = require('http');
const https = require('https');
const fs = require('fs');

var privateKey = fs.readFileSync("/etc/letsencrypt/live/haxios.kr/privkey.pem")
var certificate = fs.readFileSync("/etc/letsencrypt/live/haxios.kr/cert.pem")
var ca = fs.readFileSync("/etc/letsencrypt/live/haxios.kr/chain.pem")
const credentials = { key: privateKey, cert: certificate, ca: ca }

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

// const server = http.createServer(app);


http.createServer(app).listen(80);
const server = https.createServer(credentials, app).listen(443);

const io = require('socket.io')(server, {
  cors: {
    origin: '*',
  },
});
/**
 * Listen on provided port, on all network interfaces.
 */

// server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// io.on('connection', function (socket) {
//   console.log(socket.id, 'Connected');
//   socket.on('init', function (data) {
//     let arr = [];
//     let count = 1;
//     let name = '익명' + count++;
//     // socket.broadcast.emit('welcome', `${data.name}`);
//     socket.emit('welcome', arr.concat(data.name));
//     io.emit('new-connect', name);
//   });
//   socket.on('disconnect', function () {
//     console.log('disconnect');
//   });
// });

let count = 1;
io.on('connection', function (socket) {
  console.log('user connected: ', socket.id);
  let name = '익명' + count++;
  socket.name = name;
  io.to(socket.id).emit('create name', name);
  io.emit('new_connect', name);

  socket.on('disconnect', function () {
    console.log('user disconnected: ' + socket.id + ' ' + socket.name);
    io.emit('new_disconnect', socket.name);
  });

  socket.on('send message', function (text) {
    console.log(`${name} : ${text.msg}`);
    let msg = name + ' : ' + text.msg;
    if (name != socket.name) io.emit('change name', socket.name, name);
    socket.name = name;
    io.emit('receive message', msg);
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);

      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
